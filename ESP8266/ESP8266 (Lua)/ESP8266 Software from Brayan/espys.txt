The server client code, despite being a server, is less intense than the client code.  The code for the server starts up by booting the module into access point mode and then setting the corresponding connection parameters, such as SSID and password, if any.  The appropriate input-output pins are then configured to be in output mode, one assigned for each player.  After the connection settings and port modes are in place, the server then starts up a UDP server connection, open on a predefined port and then begins listening.  Within the UDP connection parameters, commands are defined and will run whenever a packet is received.  In this case, receiving a packet will trigger the module to check if either 'x' or 'y' were received and then continue to turn the corresponding pin to high.  Lastly, there is a timer set in place to turn reset the pin outputs to low.  Since the timer for this function triggers every 0.025 seconds, this would effectively pulse the output.  At this point, it is up to the PIC microcontroller to interpret the signals coming from the ESP8266 and determine which pin was signaled high first, making note which player pressed the button first.

The wifi client code serves the purpose of starting a connection with an available wireless accesspoint that complies with IEEE 802.11 a/b/g standards.  While the connection is taking place, both of the general purpose input-output are set to their intendeded modes and the ESP8266 begins checking for an IP address using one of the seven available timers.  In this case, the server IP is checked every 0.05 seconds in tandem with a reading of the input pin that checks for a button press.  If the IP address successfully returns with a value other than 'nil', then a connection is verified and the green LED that is connected to the output pin is driven high, lighting up the LED and making the connection apparent to the user and signaling that the module is ready to make a successful transmission to the predefined IP address.

On every instance of the timer trigger, the button press is checked for its current state, if the button is pressed, the module transmits the character 'x' or 'y', depending on what player is transmitting, over WiFI using UDP.

Since UDP is a connectionless protocol, the module's hardware makes no effort to check if the payload was properly received.  Any sort of error-checking would be have to be done by the program running the connection or other higher-level software, such as an operating system.  The timer triggers every 0.05 seconds, so there is an effective burst of packets streaming out every time the button is pressed - A brute force method of nearly guaranteeing the transmission of at least one packet containing the payload to the server.

Previous versons of the client-server connection used TCP, a connection oriented protocol, which proved to be unreliable at best.  A majority of the packets sent by the client did not reach the server and this would cause the module to hang while it waited for a response before timing out.  This may be due to incorrect use of code, although given the factor of time, moving to a working version using UDP proved to be much more effective instead of investing more time and effort debugging TCP based communications.